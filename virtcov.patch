From 57c39cf4123fc96d3a6a2a822455665ed31a2312 Mon Sep 17 00:00:00 2001
From: Luyao Huang <lhuang@redhat.com>
Date: Thu, 17 Nov 2016 14:27:59 +0800
Subject: [PATCH] Virtcov for v0.10.2~

Signed-off-by: Luyao Huang <lhuang@redhat.com>
---
 Makefile.am       |   2 +-
 libvirt.spec.in   |  16 ++++-
 tools/Makefile.am |   6 ++
 tools/virtcov.in  | 208 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 230 insertions(+), 2 deletions(-)
 create mode 100644 tools/virtcov.in

diff --git a/Makefile.am b/Makefile.am
index 333e300..487523b 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -50,7 +50,7 @@ $(top_srcdir)/HACKING: $(top_srcdir)/docs/hacking1.xsl $(top_srcdir)/docs/hackin
 	   > $@-t && mv $@-t $@ ; fi );
 
 rpm: clean
-	@(unset CDPATH ; $(MAKE) dist && rpmbuild -ta $(distdir).tar.gz)
+	@(unset CDPATH ; $(MAKE) dist && rpmbuild --define "_topdir /usr/coverage" -ta $(distdir).tar.gz)
 
 check-local: all tests
 
diff --git a/libvirt.spec.in b/libvirt.spec.in
index 174053d..e3f795e 100644
--- a/libvirt.spec.in
+++ b/libvirt.spec.in
@@ -319,7 +319,7 @@
 Summary: Library providing a simple virtualization API
 Name: libvirt
 Version: @VERSION@
-Release: 1%{?dist}%{?extra_release}
+Release: 1.virtcov%{?dist}%{?extra_release}
 License: LGPLv2+
 Group: Development/Libraries
 BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root
@@ -444,6 +444,9 @@ Requires: numad
 Requires: dbus
 # For uid creation during pre
 Requires(pre): shadow-utils
+# For virt-cov
+Requires: numactl-devel
+
 
 # All build-time requirements
 %if 0%{?enable_autotools}
@@ -952,6 +955,7 @@ autoreconf -if
            %{?_with_firewalld} \
            %{with_packager} \
            %{with_packager_version} \
+           --enable-test-coverage \
            --with-qemu-user=%{qemu_user} \
            --with-qemu-group=%{qemu_group} \
            %{init_scripts}
@@ -1035,6 +1039,11 @@ rm -rf $RPM_BUILD_ROOT%{_sysconfdir}/logrotate.d/libvirtd.lxc
 rm -rf $RPM_BUILD_ROOT%{_sysconfdir}/logrotate.d/libvirtd.uml
 %endif
 
+mkdir docs/gcno
+rsync -avm --include='*.gcno' --include='*.c' --include='*.h' \
+    --include='*.generated.*' -f 'hide,! */' . docs/gcno
+chmod a+rw -R docs/gcno
+
 %clean
 rm -fr %{buildroot}
 
@@ -1067,6 +1076,9 @@ if ! getent passwd qemu >/dev/null; then
 fi
 exit 0
 %endif
+if [ -d "/usr/coverage/BUILD/libvirt-%{version}" ]; then
+    mv -f /usr/coverage/BUILD/libvirt-%{version} /usr/coverage/BUILD/libvirt-%{version}-bk
+fi
 
 %post
 
@@ -1384,6 +1396,7 @@ rm -f $RPM_BUILD_ROOT%{_sysconfdir}/sysctl.d/libvirtd
 %{_mandir}/man1/virt-host-validate.1*
 %{_bindir}/virsh
 %{_bindir}/virt-xml-validate
+%{_bindir}/virtcov
 %{_bindir}/virt-pki-validate
 %{_bindir}/virt-host-validate
 %{_libdir}/lib*.so.*
@@ -1438,6 +1451,7 @@ rm -f $RPM_BUILD_ROOT%{_sysconfdir}/sysctl.d/libvirtd
 
 %doc docs/*.html docs/html docs/*.gif
 %doc docs/libvirt-api.xml
+%doc docs/gcno
 %doc examples/hellolibvirt
 %doc examples/domain-events/events-c
 %doc examples/dominfo
diff --git a/tools/Makefile.am b/tools/Makefile.am
index 9391696..2e37236 100644
--- a/tools/Makefile.am
+++ b/tools/Makefile.am
@@ -92,6 +92,12 @@ virt_host_validate_SOURCES = \
 		virt-host-validate-lxc.c virt-host-validate-lxc.h \
 		$(NULL)
 
+EXTRA_DIST += virtcov.in
+bin_SCRIPTS += virtcov
+virtcov: virtcov.in Makefile
+	$(AM_V_GEN)sed -e 's|[@]VERSION@|$(VERSION)|g' \
+		< $< > $@ || (rm $@ && exit 1) && chmod +x $@
+
 virt_host_validate_LDFLAGS = \
 		$(AM_LDFLAGS) \
 		$(PIE_LDFLAGS) \
diff --git a/tools/virtcov.in b/tools/virtcov.in
new file mode 100644
index 0000000..9ebb06e
--- /dev/null
+++ b/tools/virtcov.in
@@ -0,0 +1,208 @@
+#!/bin/sh
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this library.  If not, see
+# <http://www.gnu.org/licenses/>.
+
+version="@VERSION@"
+COVPATH="/usr/share/doc/libvirt-devel-${version}/gcno"
+WORKPATH="/usr/coverage/BUILD/libvirt-${version}/"
+COVERAGE_POOL="127.0.0.1:8000"
+
+install_lcov(){
+    echo "Get lcov"
+    git clone https://github.com/linux-test-project/lcov.git /tmp/lcov >/tmp/virtcov.log 2>&1
+    if [ $? -eq 1 ]; then
+        echo "Fail to clone lcov" >&2
+        echo "Check /tmp/virtcov.log for more details" >&2
+        exit 1
+    fi
+    echo "Install lcov"
+    make install -C /tmp/lcov >/tmp/virtcov.log 2>&1
+    if [ $? -eq 1 ]; then
+        echo "Fail to build and install lcov" >&2
+        echo "Check /tmp/virtcov.log for more details" >&2
+        exit 1
+    fi
+    echo "Clean resource"
+    rm -rf /tmp/lcov
+}
+
+preparefunc(){
+    if [ ! -d "$COVPATH" ]; then
+        echo "${COVPATH} is not exist !" >&2
+        exit 1
+    fi
+    which lcov >/dev/null 2>&1 && true
+    if [ $? -eq 1 ]; then
+        echo "Cannot find lcov, need install it first !" >&2
+        echo -e "Auto install lcov ? [y]: \c"
+        read answer
+        if [[ "$answer" == "y" || "$answer" == "" ]]; then
+            install_lcov
+        else
+            exit 1
+        fi
+    fi
+    which genhtml >/dev/null 2>&1 && true
+    if [ $? -eq 1 ]; then
+        echo "Cannot find genhtml, need install it first !" >&2
+        exit 1
+    fi
+    which rsync >/dev/null 2>&1 && true
+    if [ $? -eq 1 ]; then
+        echo "Cannot find rsync, need install it first !" >&2
+        exit 1
+    fi
+    if [ ! -e "${WORKPATH}/src/libvirt.c" ]; then
+        mkdir -p $WORKPATH
+        setenforce 0
+        chcon -R system_u:object_r:mnt_t $WORKPATH
+        setenforce 1
+        rsync -avm --include='*.gcno' --include='*.c' --include='*.h' --include='*.generated.*' -f 'hide,! */' $COVPATH $WORKPATH >/dev/null 2>&1
+    fi
+}
+
+gengcdafunc(){
+    for i in `ls -aR $WORKPATH | awk '/:$/&&f{s=$0;f=0} /:$/&&!f{sub(/:$/,"");s=$0;f=1;next} NF&&f{ print s"/"$0 }'`
+    do
+        if [[ $i == *".gcno" ]]; then
+            newfile=$(echo "$i" | sed -s "s/\.gcno/\.gcda/g")
+            touch $newfile
+            chmod a+w $newfile
+        fi
+    done
+    setenforce 0
+    chcon -R system_u:object_r:mnt_t $WORKPATH
+    setenforce 1
+}
+
+startfunc(){
+    preparefunc
+    service libvirtd stop 2>/dev/null
+    echo "Stop libvirtd"
+    lcov --directory "$WORKPATH" --zerocounters >/dev/null 2>&1
+    echo "Clear exist gcda file"
+    service libvirtd start 2>/dev/null
+    echo "Start libvirtd"
+    gengcdafunc
+    echo "create empty gcda file"
+    echo "Done!"
+}
+
+coveragefunc(){
+    local testname=$1
+
+    setenforce 0
+    service libvirtd stop 2>/dev/null
+    echo "Stop libvirtd"
+    setenforce 1
+    lcov --capture --directory "$WORKPATH" --output-file /tmp/coverage.info --test-name "$testname" >/dev/null 2>&1
+    echo "Create coverage.info in tmp directory"
+    service libvirtd start 2>/dev/null
+    echo "Start libvirtd"
+}
+
+reportfunc(){
+    preparefunc
+    echo -e "Name for this report: \c"
+    read testname
+    if [[ "$testname" == "" ]]; then
+        echo "Invalid name !" >&2
+        exit 1
+    fi
+    coveragefunc $testname
+    echo -e "Create a html report ? [y]: \c"
+    read answer
+    if [[ "$answer" == "y" || "$answer" == "" ]]; then
+        genhtml /tmp/coverage.info --output-directory out >/dev/null
+        echo "open out/index.html to check the report"
+    fi
+    echo "Done!"
+}
+
+uploadfunc(){
+    preparefunc
+    echo -e "Name for this report: \c"
+    read testname
+    if [[ "$testname" == "" ]]; then
+        echo "Invalid name !" >&2
+        exit 1
+    fi
+    coveragefunc $testname
+    if [ -z $VIRTCOV_NAME ]; then
+        echo -e "Your name: \c"
+        read answer
+        if [[ "$answer" == "" ]]; then
+            echo "Invalid name !" >&2
+            exit 1
+        fi
+        export VIRTCOV_NAME="$answer"
+    fi
+    if [ -z $VIRTCOV_SERVER ]; then
+        export VIRTCOV_SERVER="http://$COVERAGE_POOL/upload/coveragefile/"
+    fi
+    if [ -z $VIRTCOV_VERSION ]; then
+        virtcov_version=$(rpm -q libvirt)
+        if [ $? -eq 1 ]; then
+            echo "Fail to get libvirt version !" >&2
+            exit 1
+        fi
+        export VIRTCOV_VERSION=$virtcov_version
+    fi
+    echo "Upload coverage info"
+    curl --form "coveragefile=@/tmp/coverage.info" --form name="$testname" --form user_name="$VIRTCOV_NAME" --form version="$VIRTCOV_VERSION" $VIRTCOV_SERVER
+    echo "Done!"
+}
+
+cleanfunc(){
+    lcov --directory "$WORKPATH" --zerocounters >/dev/null 2>&1
+    echo "Clear exist gcda file"
+    gengcdafunc
+    echo "create empty gcda file"
+    echo "Done!"
+}
+
+set -e
+
+case $1 in
+  -h | --h | --he | --hel | --help)
+    cat <<EOF
+Usage:
+  $0 OPTION
+
+Options:
+  -h | --help        Display program help
+  -s | --start       Clear exist coverage report and start a new record
+  -c | --clear       Clear exist coverage report without restart libvirtd
+  -r | --report      Create a html report on current directory
+  -u | --upload      Upload coverage info to coverage server
+EOF
+    exit ;;
+  -s | --s | --st | --sta | --star | --start)
+    startfunc
+    exit ;;
+  -r | --r | --re | --rep | --repo | --repor | --report)
+    reportfunc
+    exit ;;
+  -c | --c | --cl | --cle | --clea | --clear)
+    cleanfunc
+    exit ;;
+  -u | --u | --up | --upl | --uplo | --uploa | --upload)
+    uploadfunc
+    exit ;;
+  --) shift ;;
+  *)
+    echo "$0: unrecognized option '$1'" >&2
+    exit 1 ;;
+esac
-- 
1.8.3.1

