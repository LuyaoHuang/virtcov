From 4fb0a50b57edaa6a66fc0d170537a0118e8e77fb Mon Sep 17 00:00:00 2001
From: Luyao Huang <lhuang@redhat.com>
Date: Fri, 4 Nov 2016 12:01:11 +0800
Subject: [PATCH] Virtcov for v1.2.8~

Signed-off-by: Luyao Huang <lhuang@redhat.com>
---
 Makefile.am       |   2 +-
 libvirt.spec.in   |  15 +++-
 tools/Makefile.am |   8 ++-
 tools/virtcov.in  | 208 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 229 insertions(+), 4 deletions(-)
 create mode 100644 tools/virtcov.in

diff --git a/Makefile.am b/Makefile.am
index d338d5a..433e15e 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -72,7 +72,7 @@ $(top_srcdir)/HACKING: $(top_srcdir)/docs/hacking1.xsl \
 	   > $@-t && mv $@-t $@ ; fi;
 
 rpm: clean
-	@(unset CDPATH ; $(MAKE) dist && rpmbuild -ta $(distdir).tar.gz)
+	@(unset CDPATH ; $(MAKE) dist && rpmbuild --define "_topdir /usr/coverage" -ta $(distdir).tar.gz)
 
 check-local: all tests
 
diff --git a/libvirt.spec.in b/libvirt.spec.in
index 49d6601..93739c8 100644
--- a/libvirt.spec.in
+++ b/libvirt.spec.in
@@ -382,7 +382,7 @@
 Summary: Library providing a simple virtualization API
 Name: libvirt
 Version: @VERSION@
-Release: 1%{?dist}%{?extra_release}
+Release: 1.virtcov%{?dist}%{?extra_release}
 License: LGPLv2+
 Group: Development/Libraries
 BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root
@@ -738,6 +738,9 @@ Requires: numad
 Requires: dbus
 # For uid creation during pre
 Requires(pre): shadow-utils
+# For virt-cov
+Requires: numactl-devel
+
 
 %description daemon
 Server side daemon required to manage the virtualization capabilities
@@ -1542,6 +1545,7 @@ rm -f po/stamp-po
            --with-qemu-group=%{qemu_group} \
            %{?with_loader_nvram} \
            %{?enable_werror} \
+           --enable-test-coverage \
            --enable-expensive-tests \
            %{init_scripts}
 make %{?_smp_mflags}
@@ -1640,6 +1644,11 @@ mv $RPM_BUILD_ROOT%{_datadir}/systemtap/tapset/libvirt_qemu_probes.stp \
 rm -f $RPM_BUILD_ROOT%{_prefix}/lib/sysctl.d/60-libvirtd.conf
 %endif
 
+mkdir libvirt-docs/gcno
+rsync -avm --include='*.gcno' --include='*.c' --include='*.h' \
+    --include='*.generated.*' -f 'hide,! */' . libvirt-docs/gcno
+chmod a+rw -R libvirt-docs/gcno
+
 %clean
 rm -fr %{buildroot}
 
@@ -1857,6 +1866,9 @@ if [ $1 = 0 ]; then
     rm -f /var/lib/libvirt/libvirt-guests
 fi
 %endif
+if [ -d "/usr/coverage/BUILD/libvirt-%{version}" ]; then
+    mv -f /usr/coverage/BUILD/libvirt-%{version} /usr/coverage/BUILD/libvirt-%{version}-bk
+fi
 
 %post client
 
@@ -2238,6 +2250,7 @@ exit 0
 %{_mandir}/man1/virt-host-validate.1*
 %{_bindir}/virsh
 %{_bindir}/virt-xml-validate
+%{_bindir}/virtcov
 %{_bindir}/virt-pki-validate
 %{_bindir}/virt-host-validate
 %{_libdir}/libvirt.so.*
diff --git a/tools/Makefile.am b/tools/Makefile.am
index 93d642d..0b051ad 100644
--- a/tools/Makefile.am
+++ b/tools/Makefile.am
@@ -53,7 +53,7 @@ EXTRA_DIST = \
 	virsh-network.c virsh-nodedev.c			\
 	virsh-nwfilter.c virsh-pool.c			\
 	virsh-secret.c virsh-snapshot.c			\
-	virsh-volume.c
+	virsh-volume.c virtcov.in
 
 
 
@@ -62,7 +62,7 @@ DISTCLEANFILES =
 confdir = $(sysconfdir)/libvirt
 conf_DATA =
 
-bin_SCRIPTS = virt-xml-validate virt-pki-validate
+bin_SCRIPTS = virt-xml-validate virt-pki-validate virtcov
 bin_PROGRAMS = virsh virt-host-validate
 libexec_SCRIPTS = libvirt-guests.sh
 
@@ -103,6 +103,10 @@ virt-xml-validate.1: virt-xml-validate.in $(top_srcdir)/configure.ac
 	    && if grep 'POD ERROR' $(srcdir)/$@ ; then \
 		rm $(srcdir)/$@; exit 1; fi
 
+virtcov: virtcov.in Makefile
+	$(AM_V_GEN)sed -e 's|[@]VERSION@|$(VERSION)|g' \
+		< $< > $@ || (rm $@ && exit 1) && chmod +x $@
+
 virt-pki-validate: virt-pki-validate.in Makefile
 	$(AM_V_GEN)sed -e 's|[@]sysconfdir@|$(sysconfdir)|g' \
 		       -e 's|[@]VERSION@|$(VERSION)|g' \
diff --git a/tools/virtcov.in b/tools/virtcov.in
new file mode 100644
index 0000000..d8a5207
--- /dev/null
+++ b/tools/virtcov.in
@@ -0,0 +1,208 @@
+#!/bin/sh
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this library.  If not, see
+# <http://www.gnu.org/licenses/>.
+
+version="@VERSION@"
+COVPATH="/usr/share/doc/libvirt-docs-${version}/gcno/"
+WORKPATH="/usr/coverage/BUILD/libvirt-${version}/"
+COVERAGE_POOL="127.0.0.1:8000"
+
+install_lcov(){
+    echo "Get lcov"
+    git clone https://github.com/linux-test-project/lcov.git /tmp/lcov >/tmp/virtcov.log 2>&1
+    if [ $? -eq 1 ]; then
+        echo "Fail to clone lcov" >&2
+        echo "Check /tmp/virtcov.log for more details" >&2
+        exit 1
+    fi
+    echo "Install lcov"
+    make install -C /tmp/lcov >/tmp/virtcov.log 2>&1
+    if [ $? -eq 1 ]; then
+        echo "Fail to build and install lcov" >&2
+        echo "Check /tmp/virtcov.log for more details" >&2
+        exit 1
+    fi
+    echo "Clean resource"
+    rm -rf /tmp/lcov
+}
+
+preparefunc(){
+    if [ ! -d "$COVPATH" ]; then
+        echo "${COVPATH} is not exist !" >&2
+        exit 1
+    fi
+    which lcov >/dev/null 2>&1 && true
+    if [ $? -eq 1 ]; then
+        echo "Cannot find lcov, need install it first !" >&2
+        echo -e "Auto install lcov ? [y]: \c"
+        read answer
+        if [[ "$answer" == "y" || "$answer" == "" ]]; then
+            install_lcov
+        else
+            exit 1
+        fi
+    fi
+    which genhtml >/dev/null 2>&1 && true
+    if [ $? -eq 1 ]; then
+        echo "Cannot find genhtml, need install it first !" >&2
+        exit 1
+    fi
+    which rsync >/dev/null 2>&1 && true
+    if [ $? -eq 1 ]; then
+        echo "Cannot find rsync, need install it first !" >&2
+        exit 1
+    fi
+    if [ ! -e "${WORKPATH}/src/libvirt.c" ]; then
+        mkdir -p $WORKPATH
+        setenforce 0
+        chcon -R system_u:object_r:mnt_t $WORKPATH
+        setenforce 1
+        rsync -avm --include='*.gcno' --include='*.c' --include='*.h' --include='*.generated.*' -f 'hide,! */' $COVPATH $WORKPATH >/dev/null 2>&1
+    fi
+}
+
+gengcdafunc(){
+    for i in `ls -aR $WORKPATH | awk '/:$/&&f{s=$0;f=0} /:$/&&!f{sub(/:$/,"");s=$0;f=1;next} NF&&f{ print s"/"$0 }'`
+    do
+        if [[ $i == *".gcno" ]]; then
+            newfile=$(echo "$i" | sed -s "s/gcno/gcda/g")
+            touch $newfile
+            chmod a+w $newfile
+        fi
+    done
+    setenforce 0
+    chcon -R system_u:object_r:mnt_t $WORKPATH
+    setenforce 1
+}
+
+startfunc(){
+    preparefunc
+    systemctl stop libvirtd 2>/dev/null
+    echo "Stop libvirtd"
+    lcov --directory "$WORKPATH" --zerocounters >/dev/null 2>&1
+    echo "Clear exist gcda file"
+    systemctl start libvirtd 2>/dev/null
+    echo "Start libvirtd"
+    gengcdafunc
+    echo "create empty gcda file"
+    echo "Done!"
+}
+
+coveragefunc(){
+    local testname=$1
+
+    setenforce 0
+    systemctl stop libvirtd 2>/dev/null
+    echo "Stop libvirtd"
+    setenforce 1
+    lcov --capture --directory "$WORKPATH" --output-file /tmp/coverage.info --test-name "$testname" >/dev/null 2>&1
+    echo "Create coverage.info in tmp directory"
+    systemctl start libvirtd 2>/dev/null
+    echo "Start libvirtd"
+}
+
+reportfunc(){
+    preparefunc
+    echo -e "Name for this report: \c"
+    read testname
+    if [[ "$testname" == "" ]]; then
+        echo "Invalid name !" >&2
+        exit 1
+    fi
+    coveragefunc $testname
+    echo -e "Create a html report ? [y]: \c"
+    read answer
+    if [[ "$answer" == "y" || "$answer" == "" ]]; then
+        genhtml /tmp/coverage.info --output-directory out >/dev/null
+        echo "open out/index.html to check the report"
+    fi
+    echo "Done!"
+}
+
+uploadfunc(){
+    preparefunc
+    echo -e "Name for this report: \c"
+    read testname
+    if [[ "$testname" == "" ]]; then
+        echo "Invalid name !" >&2
+        exit 1
+    fi
+    coveragefunc $testname
+    if [ -z $VIRTCOV_NAME ]; then
+        echo -e "Your name: \c"
+        read answer
+        if [[ "$answer" == "" ]]; then
+            echo "Invalid name !" >&2
+            exit 1
+        fi
+        export VIRTCOV_NAME="$answer"
+    fi
+    if [ -z $VIRTCOV_SERVER ]; then
+        export VIRTCOV_SERVER="http://$COVERAGE_POOL/upload/coveragefile/"
+    fi
+    if [ -z $VIRTCOV_VERSION ]; then
+        virtcov_version=$(rpm -q libvirt)
+        if [ $? -eq 1 ]; then
+            echo "Fail to get libvirt version !" >&2
+            exit 1
+        fi
+        export VIRTCOV_VERSION=$virtcov_version
+    fi
+    echo "Upload coverage info"
+    curl --form "coveragefile=@/tmp/coverage.info" --form name="$testname" --form user_name="$VIRTCOV_NAME" --form version="$VIRTCOV_VERSION" $VIRTCOV_SERVER
+    echo "Done!"
+}
+
+cleanfunc(){
+    lcov --directory "$WORKPATH" --zerocounters >/dev/null 2>&1
+    echo "Clear exist gcda file"
+    gengcdafunc
+    echo "create empty gcda file"
+    echo "Done!"
+}
+
+set -e
+
+case $1 in
+  -h | --h | --he | --hel | --help)
+    cat <<EOF
+Usage:
+  $0 OPTION
+
+Options:
+  -h | --help        Display program help
+  -s | --start       Clear exist coverage report and start a new record
+  -c | --clear       Clear exist coverage report without restart libvirtd
+  -r | --report      Create a html report on current directory
+  -u | --upload      Upload coverage info to coverage server
+EOF
+    exit ;;
+  -s | --s | --st | --sta | --star | --start)
+    startfunc
+    exit ;;
+  -r | --r | --re | --rep | --repo | --repor | --report)
+    reportfunc
+    exit ;;
+  -c | --c | --cl | --cle | --clea | --clear)
+    cleanfunc
+    exit ;;
+  -u | --u | --up | --upl | --uplo | --uploa | --upload)
+    uploadfunc
+    exit ;;
+  --) shift ;;
+  *)
+    echo "$0: unrecognized option '$1'" >&2
+    exit 1 ;;
+esac
-- 
1.8.3.1

